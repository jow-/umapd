services:
  openwrt1:
    labels:
      - attach_host_bridge=yes
      - attach_hwsim_phy=1
    build:
      context: build
      dockerfile: Dockerfile
    command: /sbin/init
    volumes:
      - ../umapd/src:/src
    networks:
      - openwrt_internal
    ports:
      - "1905:80"
    cap_add:
      - NET_ADMIN
    entrypoint: |
      sh -c '
      cat <<EOT > /etc/config/network
      config interface loopback
        option device lo
        option proto static
        option ipaddr 127.0.0.1/8

      config interface lan
        option device eth0
        option proto static
        option ipaddr 192.168.1.1/24

      config interface wan
        option device eth1
        option proto static
        option ipaddr 10.210.54.10/24
        option gateway 10.210.54.1
        option dns 8.8.8.8

      config interface easymesh
        option device easymesh0
        option proto static
        option ipaddr 10.42.0.1/24

      config device
        option type bridge
        option name easymesh0
        option stp 1
        option bridge_empty 1
      EOT
      cat <<EOT >> /etc/config/dhcp
      config dhcp
        option interface easymesh
        option start 100
        option limit 150
        option leasetime 1h
      EOT
      cat <<EOT >> /etc/config/firewall
      config zone
        option name easymesh
        option network easymesh
        option input REJECT
        option output ACCEPT
        option forward REJECT

      config forwarding
        option src easymesh
        option dest wan

      config rule
        option name "easymesh: Allow-DHCP"
        option src easymesh
        option proto udp
        option dest_port 67-68
        option target ACCEPT
        option family ipv4

      config rule
        option name "Allow wan ui access"
        option src wan
        option proto tcp
        option dest_port 80
        option target ACCEPT
      EOT
      cat <<EOT > /etc/rc.local
      #!/bin/sh
      /sbin/wifi config
      /sbin/uci set wireless.radio0.country=US
      /sbin/uci set wireless.radio0.ldpc=0
      /sbin/uci set wireless.radio0.rx_stbc=0
      /sbin/uci set wireless.radio0.max_amsdu=0
      /sbin/uci set wireless.radio0.disabled=0
      while /sbin/uci -q delete wireless.@wifi-iface[0]; do :; done
      /sbin/uci add wireless wifi-iface
      /sbin/uci set wireless.@wifi-iface[-1].device=radio0
      /sbin/uci set wireless.@wifi-iface[-1].mode=ap
      /sbin/uci set wireless.@wifi-iface[-1].ssid=ezm-backhaul
      /sbin/uci set wireless.@wifi-iface[-1].encryption=psk2
      /sbin/uci set wireless.@wifi-iface[-1].key=12345678
      /sbin/uci set wireless.@wifi-iface[-1].hidden=1
      /sbin/uci set wireless.@wifi-iface[-1].multi_ap=1
      /sbin/uci set wireless.@wifi-iface[-1].network=easymesh
      /sbin/uci add wireless wifi-iface
      /sbin/uci set wireless.@wifi-iface[-1].device=radio0
      /sbin/uci set wireless.@wifi-iface[-1].mode=ap
      /sbin/uci set wireless.@wifi-iface[-1].ssid=ezm
      /sbin/uci set wireless.@wifi-iface[-1].encryption=psk2
      /sbin/uci set wireless.@wifi-iface[-1].key=87654321
      /sbin/uci set wireless.@wifi-iface[-1].wps_pushbutton=1
      /sbin/uci set wireless.@wifi-iface[-1].multi_ap=2
      /sbin/uci set wireless.@wifi-iface[-1].multi_ap_backhaul_ssid=ezm-backhaul
      /sbin/uci set wireless.@wifi-iface[-1].multi_ap_backhaul_key=12345678
      /sbin/uci set wireless.@wifi-iface[-1].network=easymesh
      /sbin/uci commit wireless
      /sbin/wifi up
      exit 0
      EOT
      mkdir -p /var/lock
      /etc/init.d/umapd disable
      exec /sbin/init
      '

  openwrt2:
    labels:
      - attach_hwsim_phy=2
    build:
      context: build
      dockerfile: Dockerfile
    command: /sbin/init
    volumes:
      - ../umapd/src:/src
    networks:
      - openwrt_internal
    cap_add:
      - NET_ADMIN
    entrypoint: |
      sh -c '
      cat <<EOT > /etc/config/network
      config interface loopback
        option device lo
        option proto static
        option ipaddr 127.0.0.1/8

      config interface lan
        option device eth0
        option proto static
        option ipaddr 192.168.1.2/24
        #option gateway 192.168.1.1
        #option dns 192.168.1.1

      config interface easymesh
        option device easymesh0
        option proto dhcp

      config device
        option type bridge
        option name easymesh0
        option stp 1
        option bridge_empty 1
      EOT
      cat <<EOT > /etc/rc.local
      #!/bin/sh
      /sbin/wifi config
      exit 0
      EOT
      mkdir -p /var/lock
      /etc/init.d/dnsmasq disable
      /etc/init.d/umapd disable
      exec /sbin/init
      '

  openwrt3:
    labels:
      - attach_hwsim_phy=3
    build:
      context: build
      dockerfile: Dockerfile
    command: /sbin/init
    volumes:
      - ../umapd/src:/src
    networks:
      - openwrt_internal
    cap_add:
      - NET_ADMIN
    entrypoint: |
      sh -c '
      cat <<EOT > /etc/config/network
      config interface loopback
        option device lo
        option proto static
        option ipaddr 127.0.0.1/8

      config interface lan
        option device eth0
        option proto static
        option ipaddr 192.168.1.3/24
        #option gateway 192.168.1.1
        #option dns 192.168.1.15

      config interface easymesh
        option device easymesh0
        option proto dhcp

      config device
        option type bridge
        option name easymesh0
        option stp 1
        option bridge_empty 1
      EOT
      cat <<EOT > /etc/rc.local
      #!/bin/sh
      /sbin/wifi config
      exit 0
      EOT
      mkdir -p /var/lock
      /etc/init.d/dnsmasq disable
      /etc/init.d/umapd disable
      /sbin/wifi config
      exec /sbin/init
      '

  connect-host-network:
    image: docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /lib/modules:/lib/modules:ro
    depends_on:
      - openwrt1
    pid: host
    network_mode: host
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    command: |
      sh -c '
      set -x
      apk update
      apk add iw
      rmmod mac80211_hwsim
      find /lib/modules/$$(uname -r) -name "mac80211_hwsim.ko*" | xargs -r -I"{}" insmod {} radios=3
      for phy in /sys/devices/virtual/mac80211_hwsim/hwsim*/ieee80211/phy*; do
        if [ -z "$$phy1" ]; then
          iw phy "$$(basename "$$phy")" set name wifi0
          phy1=wifi0 #$$(basename "$$phy")
        elif [ -z "$$phy2" ]; then
          iw phy "$$(basename "$$phy")" set name wifi1
          phy2=wifi1 #$$(basename "$$phy")
        elif [ -z "$$phy3" ]; then
          iw phy "$$(basename "$$phy")" set name wifi2
          phy3=wifi2 #$$(basename "$$phy")
        fi
      done
      docker ps -f label=attach_host_bridge=yes -q | xargs -I"{}" docker network connect bridge {}
      [ -z "$$phy1" ] || docker ps -f label=attach_hwsim_phy=1 -q | xargs -r -I"{}" docker inspect -f "{{.State.Pid}}" {} | xargs -r -I"{}" iw phy "$$phy1" set netns {}
      [ -z "$$phy2" ] || docker ps -f label=attach_hwsim_phy=2 -q | xargs -r -I"{}" docker inspect -f "{{.State.Pid}}" {} | xargs -r -I"{}" iw phy "$$phy2" set netns {}
      [ -z "$$phy3" ] || docker ps -f label=attach_hwsim_phy=3 -q | xargs -r -I"{}" docker inspect -f "{{.State.Pid}}" {} | xargs -r -I"{}" iw phy "$$phy3" set netns {}
      '

networks:
  openwrt_internal:
    driver: bridge
